/*
Core APIs

universalmacro

API version: 0.0.2
Contact: chenyunda218@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateMerchantRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMerchantRequest{}

// CreateMerchantRequest struct for CreateMerchantRequest
type CreateMerchantRequest struct {
	Account string `json:"account"`
	Password string `json:"password"`
}

type _CreateMerchantRequest CreateMerchantRequest

// NewCreateMerchantRequest instantiates a new CreateMerchantRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMerchantRequest(account string, password string) *CreateMerchantRequest {
	this := CreateMerchantRequest{}
	this.Account = account
	this.Password = password
	return &this
}

// NewCreateMerchantRequestWithDefaults instantiates a new CreateMerchantRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMerchantRequestWithDefaults() *CreateMerchantRequest {
	this := CreateMerchantRequest{}
	return &this
}

// GetAccount returns the Account field value
func (o *CreateMerchantRequest) GetAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *CreateMerchantRequest) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *CreateMerchantRequest) SetAccount(v string) {
	o.Account = v
}

// GetPassword returns the Password field value
func (o *CreateMerchantRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateMerchantRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateMerchantRequest) SetPassword(v string) {
	o.Password = v
}

func (o CreateMerchantRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMerchantRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account"] = o.Account
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *CreateMerchantRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateMerchantRequest := _CreateMerchantRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateMerchantRequest)

	if err != nil {
		return err
	}

	*o = CreateMerchantRequest(varCreateMerchantRequest)

	return err
}

type NullableCreateMerchantRequest struct {
	value *CreateMerchantRequest
	isSet bool
}

func (v NullableCreateMerchantRequest) Get() *CreateMerchantRequest {
	return v.value
}

func (v *NullableCreateMerchantRequest) Set(val *CreateMerchantRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMerchantRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMerchantRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMerchantRequest(val *CreateMerchantRequest) *NullableCreateMerchantRequest {
	return &NullableCreateMerchantRequest{value: val, isSet: true}
}

func (v NullableCreateMerchantRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMerchantRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


