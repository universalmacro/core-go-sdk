/*
Core APIs

universalmacro

API version: 0.0.2
Contact: chenyunda218@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiConfig{}

// ApiConfig struct for ApiConfig
type ApiConfig struct {
	MerchantUrl *string `json:"merchantUrl,omitempty"`
}

// NewApiConfig instantiates a new ApiConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiConfig() *ApiConfig {
	this := ApiConfig{}
	return &this
}

// NewApiConfigWithDefaults instantiates a new ApiConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiConfigWithDefaults() *ApiConfig {
	this := ApiConfig{}
	return &this
}

// GetMerchantUrl returns the MerchantUrl field value if set, zero value otherwise.
func (o *ApiConfig) GetMerchantUrl() string {
	if o == nil || IsNil(o.MerchantUrl) {
		var ret string
		return ret
	}
	return *o.MerchantUrl
}

// GetMerchantUrlOk returns a tuple with the MerchantUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiConfig) GetMerchantUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantUrl) {
		return nil, false
	}
	return o.MerchantUrl, true
}

// HasMerchantUrl returns a boolean if a field has been set.
func (o *ApiConfig) HasMerchantUrl() bool {
	if o != nil && !IsNil(o.MerchantUrl) {
		return true
	}

	return false
}

// SetMerchantUrl gets a reference to the given string and assigns it to the MerchantUrl field.
func (o *ApiConfig) SetMerchantUrl(v string) {
	o.MerchantUrl = &v
}

func (o ApiConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantUrl) {
		toSerialize["merchantUrl"] = o.MerchantUrl
	}
	return toSerialize, nil
}

type NullableApiConfig struct {
	value *ApiConfig
	isSet bool
}

func (v NullableApiConfig) Get() *ApiConfig {
	return v.value
}

func (v *NullableApiConfig) Set(val *ApiConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApiConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApiConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiConfig(val *ApiConfig) *NullableApiConfig {
	return &NullableApiConfig{value: val, isSet: true}
}

func (v NullableApiConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


