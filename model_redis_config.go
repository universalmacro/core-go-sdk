/*
Core APIs

universalmacro

API version: 0.0.2
Contact: chenyunda218@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RedisConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedisConfig{}

// RedisConfig struct for RedisConfig
type RedisConfig struct {
	Host *string `json:"host,omitempty"`
	Port *string `json:"port,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewRedisConfig instantiates a new RedisConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedisConfig() *RedisConfig {
	this := RedisConfig{}
	return &this
}

// NewRedisConfigWithDefaults instantiates a new RedisConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedisConfigWithDefaults() *RedisConfig {
	this := RedisConfig{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *RedisConfig) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedisConfig) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *RedisConfig) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *RedisConfig) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *RedisConfig) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedisConfig) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *RedisConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *RedisConfig) SetPort(v string) {
	o.Port = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *RedisConfig) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedisConfig) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *RedisConfig) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *RedisConfig) SetPassword(v string) {
	o.Password = &v
}

func (o RedisConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedisConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableRedisConfig struct {
	value *RedisConfig
	isSet bool
}

func (v NullableRedisConfig) Get() *RedisConfig {
	return v.value
}

func (v *NullableRedisConfig) Set(val *RedisConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRedisConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRedisConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedisConfig(val *RedisConfig) *NullableRedisConfig {
	return &NullableRedisConfig{value: val, isSet: true}
}

func (v NullableRedisConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedisConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


