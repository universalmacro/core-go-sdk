/*
Core APIs

universalmacro

API version: 0.0.2
Contact: chenyunda218@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeConfig{}

// NodeConfig struct for NodeConfig
type NodeConfig struct {
	Api *ApiConfig `json:"api,omitempty"`
	Server *ServerConfig `json:"server,omitempty"`
	Database *DBConfig `json:"database,omitempty"`
	Redis *RedisConfig `json:"redis,omitempty"`
}

// NewNodeConfig instantiates a new NodeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeConfig() *NodeConfig {
	this := NodeConfig{}
	return &this
}

// NewNodeConfigWithDefaults instantiates a new NodeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeConfigWithDefaults() *NodeConfig {
	this := NodeConfig{}
	return &this
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *NodeConfig) GetApi() ApiConfig {
	if o == nil || IsNil(o.Api) {
		var ret ApiConfig
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfig) GetApiOk() (*ApiConfig, bool) {
	if o == nil || IsNil(o.Api) {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *NodeConfig) HasApi() bool {
	if o != nil && !IsNil(o.Api) {
		return true
	}

	return false
}

// SetApi gets a reference to the given ApiConfig and assigns it to the Api field.
func (o *NodeConfig) SetApi(v ApiConfig) {
	o.Api = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *NodeConfig) GetServer() ServerConfig {
	if o == nil || IsNil(o.Server) {
		var ret ServerConfig
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfig) GetServerOk() (*ServerConfig, bool) {
	if o == nil || IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *NodeConfig) HasServer() bool {
	if o != nil && !IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given ServerConfig and assigns it to the Server field.
func (o *NodeConfig) SetServer(v ServerConfig) {
	o.Server = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *NodeConfig) GetDatabase() DBConfig {
	if o == nil || IsNil(o.Database) {
		var ret DBConfig
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfig) GetDatabaseOk() (*DBConfig, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *NodeConfig) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given DBConfig and assigns it to the Database field.
func (o *NodeConfig) SetDatabase(v DBConfig) {
	o.Database = &v
}

// GetRedis returns the Redis field value if set, zero value otherwise.
func (o *NodeConfig) GetRedis() RedisConfig {
	if o == nil || IsNil(o.Redis) {
		var ret RedisConfig
		return ret
	}
	return *o.Redis
}

// GetRedisOk returns a tuple with the Redis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfig) GetRedisOk() (*RedisConfig, bool) {
	if o == nil || IsNil(o.Redis) {
		return nil, false
	}
	return o.Redis, true
}

// HasRedis returns a boolean if a field has been set.
func (o *NodeConfig) HasRedis() bool {
	if o != nil && !IsNil(o.Redis) {
		return true
	}

	return false
}

// SetRedis gets a reference to the given RedisConfig and assigns it to the Redis field.
func (o *NodeConfig) SetRedis(v RedisConfig) {
	o.Redis = &v
}

func (o NodeConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Api) {
		toSerialize["api"] = o.Api
	}
	if !IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.Redis) {
		toSerialize["redis"] = o.Redis
	}
	return toSerialize, nil
}

type NullableNodeConfig struct {
	value *NodeConfig
	isSet bool
}

func (v NullableNodeConfig) Get() *NodeConfig {
	return v.value
}

func (v *NullableNodeConfig) Set(val *NodeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeConfig(val *NodeConfig) *NullableNodeConfig {
	return &NullableNodeConfig{value: val, isSet: true}
}

func (v NullableNodeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


