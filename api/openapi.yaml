openapi: 3.0.3
info:
  contact:
    email: chenyunda218@gmail.com
  description: universalmacro
  title: Core APIs
  version: 0.0.2
servers:
- url: https://uat.api.universalmacro.com/core
- url: https://api.universalmacro.com/core
tags:
- name: Admin
- name: Session
- name: Node
- name: Merchant
paths:
  /admins:
    get:
      description: List Admins
      operationId: ListAdmin
      parameters:
      - description: Current page index
        explode: true
        in: query
        name: index
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Total pages
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminList'
          description: List Admin
      tags:
      - Admin
    post:
      description: Create user account
      operationId: CreateAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdminRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: Admin created
      tags:
      - Admin
  /admins/{id}:
    delete:
      operationId: DeleteAdmin
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Get Self info
      tags:
      - Admin
    get:
      description: Get admin info by id
      operationId: GetAdmin
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: Get Self info
      tags:
      - Admin
  /admins/{id}/password:
    put:
      description: Update admin password
      operationId: UpdateAdminPassword
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: Update password success
      tags:
      - Admin
  /admins/self:
    get:
      description: Get admin self info
      operationId: GetAdminSelf
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: Get Self info
      tags:
      - Admin
  /admins/self/password:
    put:
      description: Update admin self password
      operationId: UpdateAdminSelfPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: Update password success
      tags:
      - Admin
  /sessions:
    post:
      description: Create Login session
      operationId: CreateSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Session created
      tags:
      - Session
  /nodes:
    get:
      description: List Nodes
      operationId: ListNode
      parameters:
      - description: Current page index
        explode: true
        in: query
        name: index
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Total pages
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
          description: List Node
      tags:
      - Node
    post:
      description: Create node
      operationId: CreateNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Node created
      tags:
      - Node
  /nodes/{id}:
    delete:
      operationId: DeleteNode
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Get Self info
      tags:
      - Node
    get:
      description: Get node info by id
      operationId: GetNode
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Get Node info
      security:
      - ApiKeyAuth: []
      tags:
      - Node
  /nodes/{id}/config:
    get:
      description: Get node info by id
      operationId: GetNodeConfig
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeConfig'
          description: Get Node info
        "204":
          description: Not set yet
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      tags:
      - Node
    patch:
      description: Get node info by id
      operationId: UpdateNodeConfig
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeConfig'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeConfig'
          description: Get Node info
      tags:
      - Node
  /nodes/{id}/config/redis:
    get:
      description: Get node info by id
      operationId: GetNodeRedisConfig
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedisConfig'
          description: Get Node info
        "204":
          description: Not set yet
      security:
      - ApiKeyAuth: []
      tags:
      - Node
    put:
      description: Get node info by id
      operationId: UpdateNodeRedisConfig
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedisConfig'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedisConfig'
          description: Get Node info
      tags:
      - Node
  /nodes/{id}/config/database:
    get:
      description: Get node info by id
      operationId: GetNodeDatabaseConfig
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBConfig'
          description: Get Node info
        "204":
          description: Not set yet
      security:
      - ApiKeyAuth: []
      tags:
      - Node
    put:
      description: Get node info by id
      operationId: UpdateNodeDatabaseConfig
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBConfig'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBConfig'
          description: Get Node info
      tags:
      - Node
  /nodes/{id}/merchants:
    get:
      description: List merchants
      operationId: ListNodeMerchants
      parameters:
      - description: Current page index
        explode: true
        in: query
        name: index
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Total pages
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantList'
          description: List Merchant of node
      tags:
      - Merchant
    post:
      description: Add merchant to node
      operationId: AddMerchantToNode
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMerchantRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
          description: Add Merchant to node
      tags:
      - Merchant
components:
  parameters:
    Ordering:
      description: ASCENDING or DESCENDING
      explode: true
      in: query
      name: ordering
      required: false
      schema:
        $ref: '#/components/schemas/Ordering'
      style: form
    IndexParam:
      description: Current page index
      explode: true
      in: query
      name: index
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
    LimitParam:
      description: Total pages
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
      style: form
    ID:
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    StartAt:
      explode: true
      in: query
      name: startAt
      required: false
      schema:
        format: int64
        type: integer
      style: form
    EndAt:
      explode: true
      in: query
      name: endAt
      required: false
      schema:
        format: int64
        type: integer
      style: form
  schemas:
    CreateNodeRequest:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      type: object
    NodeList:
      example:
        pagination:
          total: 5
          limit: 1
          index: 6
        items:
        - createdAt: 0
          name: name
          description: description
          id: id
          securityKey: securityKey
          updatedAt: 6
        - createdAt: 0
          name: name
          description: description
          id: id
          securityKey: securityKey
          updatedAt: 6
      properties:
        items:
          items:
            $ref: '#/components/schemas/Node'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - items
      - pagination
      type: object
    Node:
      example:
        createdAt: 0
        name: name
        description: description
        id: id
        securityKey: securityKey
        updatedAt: 6
      properties:
        id:
          type: string
        name:
          type: string
        securityKey:
          type: string
        description:
          type: string
        createdAt:
          format: int64
          type: integer
        updatedAt:
          format: int64
          type: integer
      required:
      - createdAt
      - id
      - name
      - updatedAt
      type: object
    NodeConfig:
      example:
        server:
          jwtSecret: jwtSecret
          port: port
        database:
          password: password
          database: null
          port: port
          host: host
          username: username
        api:
          merchantUrl: merchantUrl
        redis:
          password: password
          port: port
          host: host
      properties:
        api:
          $ref: '#/components/schemas/ApiConfig'
        server:
          $ref: '#/components/schemas/ServerConfig'
        database:
          $ref: '#/components/schemas/DBConfig'
        redis:
          $ref: '#/components/schemas/RedisConfig'
      type: object
    RedisConfig:
      example:
        password: password
        port: port
        host: host
      properties:
        host:
          type: string
        port:
          type: string
        password:
          type: string
      type: object
    ApiConfig:
      example:
        merchantUrl: merchantUrl
      properties:
        merchantUrl:
          type: string
      type: object
    ServerConfig:
      example:
        jwtSecret: jwtSecret
        port: port
      properties:
        port:
          type: string
        jwtSecret:
          type: string
      type: object
    TencentCloudConfig:
      properties:
        secretId:
          type: string
        secretKey:
          type: string
      type: object
    DBConfig:
      example:
        password: password
        database: null
        port: port
        host: host
        username: username
      properties:
        host:
          type: string
        port:
          type: string
        username:
          type: string
        password:
          type: string
        database:
          $ref: '#/components/schemas/DatabaseType'
      required:
      - database
      - host
      - password
      - port
      - username
      type: object
    DatabaseType:
      enum:
      - MYSQL
      - POSTGRES
      type: string
    PhoneNumber:
      example:
        number: number
        countryCode: countryCode
      properties:
        countryCode:
          type: string
        number:
          type: string
      required:
      - countryCode
      - number
      type: object
    Admin:
      example:
        createdAt: 0
        phoneNumber:
          number: number
          countryCode: countryCode
        role: null
        id: id
        account: account
      properties:
        id:
          type: string
        account:
          type: string
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          format: int64
          type: integer
      required:
      - account
      - id
      type: object
    AdminList:
      description: Account list
      example:
        pagination:
          total: 5
          limit: 1
          index: 6
        items:
        - createdAt: 0
          phoneNumber:
            number: number
            countryCode: countryCode
          role: null
          id: id
          account: account
        - createdAt: 0
          phoneNumber:
            number: number
            countryCode: countryCode
          role: null
          id: id
          account: account
      properties:
        items:
          items:
            $ref: '#/components/schemas/Admin'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - items
      - pagination
      type: object
    CreateSessionRequest:
      description: Login request
      example:
        password: password
        account: account
      properties:
        account:
          type: string
        password:
          type: string
      type: object
    CreateAdminRequest:
      description: Create admin request schema
      example:
        password: password
        role: null
        account: account
      properties:
        account:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
      - account
      - password
      type: object
    Role:
      enum:
      - ROOT
      - ADMIN
      type: string
    UpdatePasswordRequest:
      example:
        password: password
        oldPassword: oldPassword
      properties:
        password:
          type: string
        oldPassword:
          type: string
      required:
      - password
      type: object
    Session:
      example:
        token: token
      properties:
        token:
          type: string
      required:
      - token
      type: object
    Ordering:
      description: Ordering
      enum:
      - ASCENDING
      - DESCENDING
      type: string
    Pagination:
      description: Pagination
      example:
        total: 5
        limit: 1
        index: 6
      properties:
        index:
          description: Current page
          format: int64
          type: integer
        limit:
          description: Amount per page
          format: int64
          type: integer
        total:
          description: Total page
          format: int64
          type: integer
      required:
      - index
      - limit
      - total
      type: object
    CreateMerchantRequest:
      example:
        password: password
        account: account
      properties:
        account:
          type: string
        password:
          type: string
      required:
      - account
      - password
      type: object
    Merchant:
      example:
        createdAt: 0
        name: name
        description: description
        id: id
        nodeId: nodeId
        updatedAt: 6
      properties:
        id:
          type: string
        nodeId:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          format: int64
          type: integer
        updatedAt:
          format: int64
          type: integer
      required:
      - account
      - createdAt
      - id
      - name
      - nodeId
      - updatedAt
      type: object
    MerchantList:
      example:
        pagination:
          total: 5
          limit: 1
          index: 6
        items:
        - createdAt: 0
          name: name
          description: description
          id: id
          nodeId: nodeId
          updatedAt: 6
        - createdAt: 0
          name: name
          description: description
          id: id
          nodeId: nodeId
          updatedAt: 6
      properties:
        items:
          items:
            $ref: '#/components/schemas/Merchant'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - items
      - pagination
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: ApiKey
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
