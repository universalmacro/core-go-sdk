/*
Core APIs

universalmacro

API version: 0.0.2
Contact: chenyunda218@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DBConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DBConfig{}

// DBConfig struct for DBConfig
type DBConfig struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Username string `json:"username"`
	Password string `json:"password"`
	Database DatabaseType `json:"database"`
}

type _DBConfig DBConfig

// NewDBConfig instantiates a new DBConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBConfig(host string, port string, username string, password string, database DatabaseType) *DBConfig {
	this := DBConfig{}
	this.Host = host
	this.Port = port
	this.Username = username
	this.Password = password
	this.Database = database
	return &this
}

// NewDBConfigWithDefaults instantiates a new DBConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBConfigWithDefaults() *DBConfig {
	this := DBConfig{}
	return &this
}

// GetHost returns the Host field value
func (o *DBConfig) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *DBConfig) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *DBConfig) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *DBConfig) GetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *DBConfig) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *DBConfig) SetPort(v string) {
	o.Port = v
}

// GetUsername returns the Username field value
func (o *DBConfig) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *DBConfig) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *DBConfig) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *DBConfig) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *DBConfig) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *DBConfig) SetPassword(v string) {
	o.Password = v
}

// GetDatabase returns the Database field value
func (o *DBConfig) GetDatabase() DatabaseType {
	if o == nil {
		var ret DatabaseType
		return ret
	}

	return o.Database
}

// GetDatabaseOk returns a tuple with the Database field value
// and a boolean to check if the value has been set.
func (o *DBConfig) GetDatabaseOk() (*DatabaseType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Database, true
}

// SetDatabase sets field value
func (o *DBConfig) SetDatabase(v DatabaseType) {
	o.Database = v
}

func (o DBConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DBConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	toSerialize["database"] = o.Database
	return toSerialize, nil
}

func (o *DBConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
		"username",
		"password",
		"database",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDBConfig := _DBConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDBConfig)

	if err != nil {
		return err
	}

	*o = DBConfig(varDBConfig)

	return err
}

type NullableDBConfig struct {
	value *DBConfig
	isSet bool
}

func (v NullableDBConfig) Get() *DBConfig {
	return v.value
}

func (v *NullableDBConfig) Set(val *DBConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDBConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDBConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBConfig(val *DBConfig) *NullableDBConfig {
	return &NullableDBConfig{value: val, isSet: true}
}

func (v NullableDBConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


